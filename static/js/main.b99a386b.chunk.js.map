{"version":3,"sources":["hooks/useWeb3Modal.js","../../contracts/src/abis.js","../../contracts/src/addresses.js","App.js","index.js"],"names":["NETWORK","useWeb3Modal","config","useState","provider","setProvider","autoLoaded","setAutoLoaded","autoLoad","network","web3Modal","useMemo","Web3Modal","cacheProvider","providerOptions","loadWeb3Modal","useCallback","a","connect","newProvider","Web3Provider","logoutOfWeb3Modal","clearCachedProvider","window","location","reload","useEffect","cachedProvider","abis","erc20","erc20Abi","faucet","ownable","ownableAbi","addresses","ptyErc20","overrideRequestButtonDisable","SetWalletButton","account","setAccount","rendered","setRendered","listAccounts","accounts","substring","console","error","fetchAccount","btnClass","Button","id","variant","onClick","App","getNetwork","networkInfo","alert","getFaucetPtyBalance","defaultProvider","JsonRpcProvider","ptyContract","Contract","balanceOf","faucetBalance","balance","toString","readableBalance","length","faucetInfoElement","document","getElementById","innerText","hidden","getWalletPtyBalance","userAddress","userBalance","walletInfoElement","requestButtonElement","checkAllowedToWithdraw","faucetContract","allowedToWithdraw","disabled","signer","getSigner","requestTokens","log","setTimeout","readableAddress","hasOwnProperty","message","checkChain","setInterval","buttonName","walletButtonElement","innerHTML","ethereum","on","networkId","Row","Col","xs","className","sm","Figure","Image","width","height","alt","src","Container","client","ApolloClient","uri","ReactDOM","render","ApolloProvider"],"mappings":"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","file":"static/js/main.b99a386b.chunk.js","sourcesContent":["import { Web3Provider } from \"@ethersproject/providers\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport Web3Modal from \"web3modal\";\n\nconst NETWORK = \"https://rpc.cheapeth.org/rpc\";\n\nfunction useWeb3Modal(config = {}) {\n  const [provider, setProvider] = useState();\n  const [autoLoaded, setAutoLoaded] = useState(false);\n  const { autoLoad = true, network = NETWORK } = config;\n\n  // Web3Modal also supports many other wallets.\n  // You can see other options at https://github.com/Web3Modal/web3modal\n  const web3Modal = useMemo(() => {\n    return new Web3Modal({\n      network,\n      cacheProvider: true,\n      providerOptions: {},\n    });\n  }, [network]);\n\n  // Open wallet selection modal.\n  const loadWeb3Modal = useCallback(async () => {\n    const newProvider = await web3Modal.connect();\n    setProvider(new Web3Provider(newProvider));\n  }, [web3Modal]);\n\n  const logoutOfWeb3Modal = useCallback(\n    async function () {\n      await web3Modal.clearCachedProvider();\n      window.location.reload();\n    },\n    [web3Modal],\n  );\n\n  // If autoLoad is enabled and the the wallet had been loaded before, load it automatically now.\n  useEffect(() => {\n    if (autoLoad && !autoLoaded && web3Modal.cachedProvider) {\n      loadWeb3Modal();\n      setAutoLoaded(true);\n    }\n  }, [autoLoad, autoLoaded, loadWeb3Modal, setAutoLoaded, web3Modal.cachedProvider]);\n\n  return [provider, loadWeb3Modal, logoutOfWeb3Modal];\n}\n\nexport default useWeb3Modal;\n","import erc20Abi from \"./abis/erc20.json\";\nimport ownableAbi from \"./abis/ownable.json\";\nimport faucet from \"./abis/faucet.json\";\n\nconst abis = {\n  erc20: erc20Abi,\n  faucet: faucet,\n  ownable: ownableAbi,\n};\n\nexport default abis;\n","// This address points to a dummy ERC20 contract deployed on Ethereum Mainnet,\n// Goerli, Kovan, Rinkeby and Ropsten. Replace it with your smart contracts.\nconst addresses = {\n  ptyErc20: \"0x4AC1242106601F70BfDc4731D4EEAF7f7501B5Cd\",\n  faucet: \"0xfd1D23F823dA379a8AA7ADFAf02ed0ce624E1642\",\n};\n\nexport default addresses;\n","import { Contract } from \"@ethersproject/contracts\";\nimport { JsonRpcProvider } from \"@ethersproject/providers\";\nimport React, { useEffect, useState } from \"react\";\nimport {Container, Button, Col, Row, Figure} from 'react-bootstrap'\n\nimport useWeb3Modal from \"./hooks/useWeb3Modal\";\n\nimport { addresses, abis } from \"@project/contracts\";\n\n\nvar overrideRequestButtonDisable = false\n\nfunction SetWalletButton({ provider, loadWeb3Modal, logoutOfWeb3Modal }) {\n  const [account, setAccount] = useState(\"\");\n  const [rendered, setRendered] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchAccount() {\n      try {\n        if (!provider) {\n          return;\n        }\n\n        // Load the user's accounts.\n        const accounts = await provider.listAccounts();\n        setAccount(accounts[0]);\n        setRendered(\"Logout \" + account.substring(0, 6) + \"...\" + account.substring(36));\n\n      } catch (err) {\n        setAccount(\"\");\n        setRendered(\"\");\n        console.error(err);\n      }\n    }\n    fetchAccount();\n  }, [account, provider, setAccount, setRendered]);\n  let btnClass = \"outline-primary\"\n  if (provider) {\n    btnClass = \"outline-warning\"\n  }\n  return (\n    <Button id=\"wallet_button\" variant={btnClass}\n      onClick={() => {\n        if (!provider) {\n          loadWeb3Modal();\n        } else {\n          logoutOfWeb3Modal();\n        }\n      }}\n    >\n      {rendered === \"\" && \"Connect Metamask\"}\n      {rendered !== \"\" && rendered}\n    </Button>\n  );\n}\n\nfunction App() {\n  const [provider, loadWeb3Modal, logoutOfWeb3Modal] = useWeb3Modal();\n\n  async function checkChain() {\n    if (provider) {\n      const networkInfo = await provider.getNetwork()\n      const chainId = networkInfo[\"chainId\"]\n      if (chainId !== 777) {\n        alert(\"Wrong network! Party Token is an ERC20 token on the cheapETH network. Visit cheapeth.org to get started!\")\n      }\n    }\n  }\n\n  async function getFaucetPtyBalance() {\n    try {\n      const defaultProvider = new JsonRpcProvider(\"https://node.cheapeth.org/rpc\")\n      const ptyContract = new Contract(addresses.ptyErc20, abis.erc20, defaultProvider);\n      const faucetBalance = await ptyContract.balanceOf(\"0xfd1D23F823dA379a8AA7ADFAf02ed0ce624E1642\")\n      const balance = faucetBalance.toString()\n      const readableBalance = balance.substring(0, balance.length - 18) + \".\" + balance.substring(balance.length - 18, balance.length -15);\n      var faucetInfoElement = document.getElementById(\"faucet_info\")\n      faucetInfoElement.innerText = \"Faucet balance: \" + readableBalance + \" PTY\"\n      faucetInfoElement.hidden = false\n    } catch (error) {\n      console.error(error)\n    }\n  }\n\n  async function getWalletPtyBalance() {\n    if (provider) {\n      const networkInfo = await provider.getNetwork()\n      const chainId = networkInfo[\"chainId\"]\n      if (chainId === 777) {\n        const accounts = await provider.listAccounts();\n        const userAddress = accounts[0];\n        const ptyContract = new Contract(addresses.ptyErc20, abis.erc20, provider);\n        const userBalance = await ptyContract.balanceOf(userAddress)\n        const balance = userBalance.toString()\n        let readableBalance = \"0.000\"\n        if (balance != 0) { // not strict comparison here\n          readableBalance = balance.substring(0, balance.length - 18) + \".\" + balance.substring(balance.length - 18, balance.length -15);\n        }\n        var walletInfoElement = document.getElementById(\"wallet_info\")\n        if (null !== walletInfoElement) {\n          walletInfoElement.innerText = \"Your balance: \" + readableBalance + \" PTY\"\n          walletInfoElement.hidden = false\n        }\n\n        var requestButtonElement = document.getElementById(\"request_button\")\n        if (null !== requestButtonElement) {\n          requestButtonElement.hidden = false\n        }\n      }\n    }\n  }\n  \n  async function checkAllowedToWithdraw() {\n    if (provider) {\n      const networkInfo = await provider.getNetwork()\n      const chainId = networkInfo[\"chainId\"]\n      if (chainId === 777) {\n        const accounts = await provider.listAccounts();\n        const userAddress = accounts[0];\n        const faucetContract = new Contract(addresses.faucet, abis.faucet, provider);\n        const allowedToWithdraw = await faucetContract.allowedToWithdraw(userAddress);\n        if (!allowedToWithdraw) {\n          document.getElementById(\"request_button\").disabled = true\n        } else {\n          document.getElementById(\"request_button\").disabled = false || overrideRequestButtonDisable;\n        }\n        return allowedToWithdraw;\n      }\n    }\n  }\n\n  async function requestPtyTokens() {\n    if (provider) {\n      const requestButtonElement = document.getElementById(\"request_button\")\n      const networkInfo = await provider.getNetwork()\n      const chainId = networkInfo[\"chainId\"]\n      if (chainId === 777) {\n        try {\n          const allowedToWithdraw = await checkAllowedToWithdraw()\n          if (true === allowedToWithdraw) {\n            requestButtonElement.disabled = true\n            const signer = provider.getSigner()\n            const faucetContract = new Contract(addresses.faucet, abis.faucet, signer);\n            const requestTokens = await faucetContract.requestTokens();\n            console.log(requestTokens);\n            alert(\"Success! You claimed 10,000PTY.\")\n            getWalletPtyBalance()\n\n            overrideRequestButtonDisable = true\n            setTimeout(function () {\n              overrideRequestButtonDisable = false\n            }, 15000)\n            return requestTokens;\n          } else {\n            const accounts = await provider.listAccounts();\n            const userAddress = accounts[0];\n            const readableAddress = userAddress.substring(0, 6) + \"...\" + userAddress.substring(36)\n            alert(\"Request failed! \" + readableAddress + \" can request PTY once every 45 minutes.\")\n          }\n        } catch (error) {\n          console.error(error)\n          if (error.hasOwnProperty(\"message\")) {\n            alert(\"Error: \" + error.message)\n          } else {\n            alert(\"Request failed with unknown error!\")\n          }\n        }\n      }\n    }\n    return false;\n  }\n  \n  checkChain()\n\n  getFaucetPtyBalance()\n  setInterval(async () => {\n    await getFaucetPtyBalance()\n  }, 15000);\n\n  checkAllowedToWithdraw()\n  setInterval(async () => {\n    checkAllowedToWithdraw()\n  }, 15000);\n\n  getWalletPtyBalance()\n  setInterval(async () => {\n    await getWalletPtyBalance()\n  }, 5000);\n\n  setInterval(async () => {\n    if (provider) {\n      let accounts = await provider.listAccounts();\n      const userAddress = accounts[0];\n      const buttonName = \"Logout \" + userAddress.substring(0, 6) + \"...\" + userAddress.substring(36)\n      const walletButtonElement = document.getElementById(\"wallet_button\");\n      if (walletButtonElement.innerHTML !== buttonName) {\n        walletButtonElement.innerText = buttonName;\n        getWalletPtyBalance()\n        checkAllowedToWithdraw()\n      }\n    }\n  }, 1500)\n\n  if (window.ethereum) {\n    window.ethereum.on('chainChanged', function(networkId){\n      window.location.reload()\n     });\n  }\n\n  return (\n    <div>\n      \n      <Row>\n         <Col xs={12} hidden id=\"faucet_info\"  className=\"text-right\">Faucet balance: PTY</Col>\n         <Col xs={12} hidden id=\"wallet_info\"  className=\"text-right\"></Col>\n      </Row>\n      <Row>\n        <Col>.</Col>\n      </Row>\n      <Row>\n        <Col sm={4} xs={12}>\n          <Figure>\n            <Figure.Image\n              width={150}\n              height={150}\n              alt=\"Party Token\"\n              src=\"https://msb111.github.io/party/party.png\"\n            />\n          </Figure>\n        </Col>\n        <Col sm={8} xs={12} className>\n          <Container>\n            <Row className=\"justify-content-md-right\">\n              <Col className=\"text-right\">\n              <p className=\"h3\">Claim free Party tokens every 45 minutes: <Button hidden id=\"request_button\" variant=\"primary\" onClick={requestPtyTokens}>Request $PTY</Button> <SetWalletButton provider={provider} loadWeb3Modal={loadWeb3Modal} logoutOfWeb3Modal={logoutOfWeb3Modal} />\n              </p>\n              </Col>\n            </Row>\n          </Container>\n        </Col> \n      </Row>\n         \n    </div>  \n  );\n}\n\nexport default App;\n","import \"./bootstrap.min.css\";\n\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport ApolloClient from \"apollo-boost\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\n// You should replace this url with your own and put it into a .env file\n// See all subgraphs: https://thegraph.com/explorer/\nconst client = new ApolloClient({\n  uri: \"https://api.thegraph.com/subgraphs/name/paulrberg/create-eth-app\",\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}